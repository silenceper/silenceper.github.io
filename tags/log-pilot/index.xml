<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>silenceper – Log-Pilot</title><link>//localhost:1313/tags/log-pilot/</link><description>Recent content in Log-Pilot on silenceper</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 22 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="//localhost:1313/tags/log-pilot/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes容器日志收集方案</title><link>//localhost:1313/blog/201910/kubernetes-log/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>//localhost:1313/blog/201910/kubernetes-log/</guid><description>
&lt;p>收集POD中container日志，日志还分为两种一种是容器标准输出日志和容器内日志。&lt;/p>
&lt;h1>方案&lt;/h1>&lt;p>从日志的采集方式上，在我看来方案大致主要分为两种：&lt;/p>
&lt;p>&lt;strong>（1）POD 里面安装logging agent&lt;/strong>&lt;/p>
&lt;p>每个pod里面都要安装一个agent，无论是以放在本container还是以sidecar的方式部署，很明显会占用很多资源，基本不推荐&lt;/p>
&lt;p>&lt;strong>（2）在节点上安装logging agent（推荐）&lt;/strong>&lt;/p>
&lt;p>其实容器stdout,stderr的日志最终也是落在宿主机上，而容器内的路径可以通过配置volumeMount 在宿主机上配置映射即可，所以这种方式还是最可行的&lt;/p>
&lt;blockquote>
&lt;p>当然应用还可以自己通过代码直接上报给日志服务，但是这种方式不够通用，还增加了业务代码的复杂性&lt;/p>
&lt;/blockquote>
&lt;h1>log-pilot 代码分析&lt;/h1>&lt;p>这里以log-pilot为例，来分析下&lt;/p>
&lt;p>代码地址： &lt;a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">https://github.com/AliyunContainerService/log-pilot&lt;/a>&lt;/p>
&lt;p>&lt;strong>基本流程:&lt;/strong>&lt;/p>
&lt;p>监听docker-service的事件（start，restart，destory），从container信息中提取pod_name,namespace信息（可通过docker inspect [container ID]查看到），并写入filebeat中的prospector.d中的配置文件。&lt;/p>
&lt;p>&lt;strong>事件监听：&lt;/strong>
&lt;a href="https://github.com/AliyunContainerService/log-pilot/blob/0948b2c1feca97f849bd3a4eeda7bd40a907efca/pilot/pilot.go#L134" target="_blank" rel="noopener">pilot/pilot.go#L134&lt;/a>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code> msgs, errs := p.client.Events(ctx, options)chenqz1987, 1 year ago: • fix issue #40 and update log-pilot capability…
go func() {
defer func() {
log.Warn(&amp;#34;finish to watch event&amp;#34;)
p.stopChan &amp;lt;- true
}()
log.Info(&amp;#34;begin to watch event&amp;#34;)
for {
select {
case msg := &amp;lt;-msgs:
if err := p.processEvent(msg); err != nil {
log.Errorf(&amp;#34;fail to process event: %v, %v&amp;#34;, msg, err)
}
case err := &amp;lt;-errs:
log.Warnf(&amp;#34;error: %v&amp;#34;, err)
if err == io.EOF || err == io.ErrUnexpectedEOF {
return
}
msgs, errs = p.client.Events(ctx, options)
}
}
}()&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>对接不同收集器&lt;/strong>&lt;/p>
&lt;p>log-pilot支持&lt;code>filebeat&lt;/code>和&lt;code>fluentd&lt;/code>两种日志收集器，目的主要是刷新对应的配置文件。主要是实现了&lt;code>Piloter&lt;/code>接口：&lt;/p>
&lt;p>&lt;a href="https://github.com/AliyunContainerService/log-pilot/blob/0948b2c1feca97f849bd3a4eeda7bd40a907efca/pilot/piloter.go#L17" target="_blank" rel="noopener">pilot/piloter.go#L17&lt;/a>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;pre>&lt;code>// Piloter interface for piloter
type Piloter interface {
Name() string
Start() error
Reload() error
Stop() error
GetBaseConf() string
GetConfHome() string
GetConfPath(container string) string
OnDestroyEvent(container string) error
}&lt;/code>&lt;/pre>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>至于在启动log-pilot选择哪种采集器进行采集，是通过在容器的&lt;a href="https://github.com/AliyunContainerService/log-pilot/blob/master/assets/entrypoint" target="_blank" rel="noopener">entrypoint&lt;/a>文件中通过制定环境变量&lt;code>PILOT_TYPE&lt;/code>的方式进行选择性渲染的。&lt;/p>
&lt;p>&lt;strong>完善&lt;/strong>&lt;/p>
&lt;p>当前最新版本[0.9.7]&lt;/p>
&lt;p>1、目前log-pilot还是只能通过监听docker-servier的event进行，对于containerd，cri-o还没办法适配。&lt;/p>
&lt;blockquote>
&lt;p>containerd目前没提供相应的event接口，可以选择从k8s api 通过List-Watch中获取&lt;/p>
&lt;/blockquote>
&lt;p>2、filebeat升级&lt;/p>
&lt;blockquote>
&lt;p>filebeat 目前用的版本是6.1.1 ，filebeat本身就是一个比较吃资源的进程，filebeat有些issue是&lt;a href="https://github.com/elastic/beats/pull/7820" target="_blank" rel="noopener">7820&lt;/a>bug，可以将filebeat升级到一个新的版本。&lt;/p>
&lt;/blockquote>
&lt;p>3、资源限制&lt;/p>
&lt;blockquote>
&lt;p>在k8s中通过制定limit，限制log-pilot的资源占用（主要还是日志采集器）&lt;/p>
&lt;/blockquote></description></item></channel></rss>