<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>silenceper – Arm64</title><link>/tags/arm64/</link><description>Recent content in Arm64 on silenceper</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Jun 2020 14:20:59 +0800</lastBuildDate><atom:link href="/tags/arm64/index.xml" rel="self" type="application/rss+xml"/><item><title>在x86_64机器上构建arm64镜像</title><link>/blog/202006/build-arm-image-on-x86_84/</link><pubDate>Fri, 05 Jun 2020 14:20:59 +0800</pubDate><guid>/blog/202006/build-arm-image-on-x86_84/</guid><description>
&lt;p>有几种办法可以打包出arm64的镜像&lt;/p>
&lt;ul>
&lt;li>直接在arm机器上执行编译和打包&lt;/li>
&lt;li>通过qemu模拟arm环境&lt;/li>
&lt;li>利用docker提供的buildx（需要启用试验性特性）&lt;/li>
&lt;/ul>
&lt;p>我没有arm的机器~，所以我主要试了一下下面两种方式。&lt;/p>
&lt;h3>借助qemu-user-static镜像打包&lt;span class="hx-absolute -hx-mt-20" id="借助qemu-user-static镜像打包">&lt;/span>
&lt;a href="#%e5%80%9f%e5%8a%a9qemu-user-static%e9%95%9c%e5%83%8f%e6%89%93%e5%8c%85" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>文档：https://github.com/multiarch/qemu-user-static&lt;/p>
&lt;p>开启arm平台支持：&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ docker run --rm --privileged multiarch/qemu-user-static:register --reset
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker build --rm -t &lt;span class="s2">&amp;#34;test/integration/ubuntu&amp;#34;&lt;/span> -&lt;span class="s">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">FROM arm64v8/ubuntu
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ docker run --rm -t &lt;span class="s2">&amp;#34;test/integration/ubuntu&amp;#34;&lt;/span> uname -m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aarch64&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>在运行&lt;code>qemu-user-static:register&lt;/code>镜像的时候，就通过内核中的binfmt_misc机制注入了哪些可执行文件可以被识别。&lt;/p>
&lt;p>注意：需要将&lt;code>qemu-aarch64-static&lt;/code>文件 copy 到&lt;code>/usr/bin&lt;/code>目录。&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>binfmt_misc&lt;/code>是Linux内核说提供的一种扩展机制, 使得更多类型的文件得以成为＂可执行＂文件．Linux内核本身支持ELF、a.out、脚本（也就是上面所说的第一行#!指定解释器的方式）这集中＂可执行文件＂．但它还提供了一个称为&lt;code>binfmt_misc&lt;/code>的内核模块, 通过这个模块可以动态注册一些＂可执行文件格式＂,注册之后我们就可以直接＂执行＂这个程序文件了．&lt;/p>
&lt;/blockquote>
&lt;h3>通过buildx打包支持多架构的镜像&lt;span class="hx-absolute -hx-mt-20" id="通过buildx打包支持多架构的镜像">&lt;/span>
&lt;a href="#%e9%80%9a%e8%bf%87buildx%e6%89%93%e5%8c%85%e6%94%af%e6%8c%81%e5%a4%9a%e6%9e%b6%e6%9e%84%e7%9a%84%e9%95%9c%e5%83%8f" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;p>文档：&lt;a href="https://docs.docker.com/buildx/working-with-buildx/" target="_blank" rel="noopener">https://docs.docker.com/buildx/working-with-buildx/&lt;/a>&lt;/p>
&lt;p>首先需要开启这个实验性的功能，怎么开启看这里：&lt;a href="https://github.com/docker/cli/blob/master/experimental/README.md" target="_blank" rel="noopener">https://github.com/docker/cli/blob/master/experimental/README.md&lt;/a>&lt;/p>
&lt;ul>
&lt;li>docker cloent: 在&lt;code>~/.docker/config.json 加入``写入&amp;quot;experimental&amp;quot;:&amp;quot;enabled&amp;quot;&lt;/code>&lt;/li>
&lt;li>dcoker daemon: 启动参数上加上&amp;ndash;experimental或者&lt;code>/etc/docker/daemon.json&lt;/code>写入&lt;code> &amp;quot;experimental&amp;quot;: true&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>进行初始化：&lt;/strong>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker buildx create --name builderx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker buildx use builderx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker buildx inspect --bootstrap &lt;span class="c1">#这一步会从外网拉取`moby/buildkit`镜像，貌似还改不了&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;strong>接下来你就可以通过如下命令去构建多种架构的镜像：&lt;/strong>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t silenceper/reverse-proxy . --push&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;p>&lt;code>--push&lt;/code>参数表示构建完成之后，并push到镜像仓库当中。&lt;/p>
&lt;p>因为镜像仓库支持一个仓库上传多种架构，并且会根据构建平台pull相匹配架构的镜像，所以我们可以在一个Dockerfile，并且通过一个命令打包镜像并push。&lt;/p>
&lt;p>这里用到的Dockerfile在这里：&lt;a href="https://github.com/silenceper/reverse-proxy/blob/master/Dockerfile" target="_blank" rel="noopener">https://github.com/silenceper/reverse-proxy/blob/master/Dockerfile&lt;/a>&lt;/p>
&lt;p>&lt;strong>通过docker的多阶段构建将编译和打包放在一起了，隔离了环境的差异。&lt;/strong>&lt;/p>
&lt;div class="hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code">
&lt;div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">FROM&lt;/span> &lt;span class="nx">golang&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">alpine&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">builder&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ADD&lt;/span> &lt;span class="p">.&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">silenceper&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">proxy&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">RUN&lt;/span> &lt;span class="nx">cd&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">silenceper&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">proxy&lt;/span>&lt;span class="o">/&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">v&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">CGO_ENABLED&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="mi">0&lt;/span> &lt;span class="nx">GOOS&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">linux&lt;/span> &lt;span class="k">go&lt;/span> &lt;span class="nx">build&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">installsuffix&lt;/span> &lt;span class="nx">cgo&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">FROM&lt;/span> &lt;span class="nx">alpine&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MAINTAINER&lt;/span> &lt;span class="nx">silenceper&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nx">silenceper&lt;/span>&lt;span class="err">@&lt;/span>&lt;span class="nx">gmail&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">COPY&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="nx">builder&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="k">go&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">src&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">silenceper&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">proxy&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">app&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="nx">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">app&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ENTRYPOINT&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;/bin/app&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">EXPOSE&lt;/span> &lt;span class="mi">80&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;div class="hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0">
&lt;button
class="hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50"
title="Copy code"
>
&lt;div class="copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;div class="success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4">&lt;/div>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;h2>总结&lt;span class="hx-absolute -hx-mt-20" id="总结">&lt;/span>
&lt;a href="#%e6%80%bb%e7%bb%93" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h2>&lt;p>最方便的肯定是直接通过buildx进行打包和编译，但是我的环境没法访问外网，又没法拉取外网的镜像，所以最终还是选择使用&lt;code>qemu-user-static&lt;/code>打包出来了。&lt;/p>
&lt;h3>参考&lt;span class="hx-absolute -hx-mt-20" id="参考">&lt;/span>
&lt;a href="#%e5%8f%82%e8%80%83" class="subheading-anchor" aria-label="Permalink for this section">&lt;/a>&lt;/h3>&lt;ul>
&lt;li>&lt;a href="https://blog.fleeto.us/post/buildx-and-osx/" target="_blank" rel="noopener">https://blog.fleeto.us/post/buildx-and-osx/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.im/post/5af86fb15188251b8015c102" target="_blank" rel="noopener">https://juejin.im/post/5af86fb15188251b8015c102&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cnblogs.com/bamanzi/p/run-x86-linux-progs-with-qemu-user-on-arm.html" target="_blank" rel="noopener">https://www.cnblogs.com/bamanzi/p/run-x86-linux-progs-with-qemu-user-on-arm.html&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>